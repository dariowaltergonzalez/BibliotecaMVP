<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="@libro" Class="pa-4">
            <MudText Typo="Typo.h6">Editar Libro</MudText>
            <MudTextField @bind-Value="libro.Titulo" Label="Título" Required="true" />
            <MudTextField @bind-Value="libro.Codigo" Label="Código" Required="true" />
            <MudTextField @bind-Value="libro.Autor" Label="Autor" Required="true" />
            <MudDatePicker @bind-Date="_date" Label="Fecha de Publicación" />
            <MudNumericField @bind-Value="libro.Cantidad" Label="Cantidad" Required="true" Min="1" />
            <MudSelect T="int" @bind-Value="libro.CategoriaId" Label="Categoría" Required="true">
                @if (categorias != null)
                {
                    @foreach (var categoria in categorias)
                    {
                        <MudSelectItem Value="@categoria.Id">@categoria.Nombre</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudButton OnClick="@Guardar" Color="Color.Primary">Guardar</MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public int LibroId { get; set; }
    private List<Categoria> categorias = [];
    private Libro libro = new Libro();
    private DateTime? _date = DateTime.Today;

    [Inject] private IRepository<Libro> Repository { get; set; } = null!;
    [Inject] private IRepository<Categoria> repositoryCategoria { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    private MudForm form = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categorias = (await repositoryCategoria.GetAllAsync()).ToList();
            libro = await Repository.GetByIdAsync(LibroId);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ocurrió un error al cargar el libro: " + ex.Message, Severity.Error);
            MudDialog.Cancel();
        }
    }

    private async Task Guardar()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                libro.FechaPublicacion = _date;
                await Repository.UpdateAsync(libro);
                MudDialog.Close(DialogResult.Ok(libro));
            }
            catch (Exception ex)
            {
                Snackbar.Add("Ocurrió un error al guardar el libro: " + ex.Message, Severity.Error);
            }
        }
    }
}
